{{>licenseInfo}}
{{#operations}}/*
 * {{classname}}.h
 *
 * {{description}}
 */

#ifndef {{classname}}_H_
#define {{classname}}_H_

{{{defaultInclude}}}
{{^hasModelImport}}#include <nlohmann/json.hpp>{{/hasModelImport}}
#include <optional>
#include <utility>
#include "{{packageName}}Error.h"
#include "{{packageName}}Response.h"
#include "cloudi.hpp"

{{#imports}}{{{import}}}
{{/imports}}

namespace {{apiNamespace}}
{

using json = nlohmann::json;
using EndpointValidationCallback = std::function<void(int, const json&)>;

class {{declspec}} {{classname}} {
public:
  explicit {{classname}}(const std::shared_ptr<CloudI::API> &api);
  virtual ~{{classname}}() = default;
  void init();

  static const std::string base;

private:
  const std::shared_ptr<CloudI::API> m_api;
  std::unordered_map<std::string, EndpointValidationCallback> endpointValidationCallbacksMap;

  void setupRoutes();
  void populateValidateMap();

  virtual {{packageName}}Error handleParsingException(const std::exception& ex) const noexcept;

  virtual {{packageName}}Error handleOperationException(const std::exception& ex) const noexcept;

  {{#operation}}
  void {{operationIdSnakeCase}}_handler(CloudI::API const &api, int const request_type,
      std::string const &name, std::string const &pattern,
      void const *const request_info,
      uint32_t const request_info_size,
      void const *const request, uint32_t const request_size,
      uint32_t timeout, int8_t priority,
      char const *const trans_id, char const *const pid,
      uint32_t const pid_size);
  {{/operation}}

  void {{classnameSnakeLowerCase}}_default_handler(CloudI::API const &api, int const request_type,
      std::string const &name, std::string const &pattern,
      void const *const request_info,
      uint32_t const request_info_size,
      void const *const request, uint32_t const request_size,
      uint32_t timeout, int8_t priority,
      char const *const trans_id, char const *const pid,
      uint32_t const pid_size);

  {{#operation}}
  /// <summary>
  /// {{summary}}
  /// </summary>
  /// <remarks>
  /// {{notes}}
  /// </remarks>
  virtual void {{operationIdSnakeCase}}(CloudI::API const &api, int const request_type,
      std::string const &name, std::string const &pattern,
      void const *const request_info,
      uint32_t const request_info_size,
      void const *const request, uint32_t const request_size,
      uint32_t timeout, int8_t priority,
      char const *const trans_id, char const *const pid,
      uint32_t const pid_size) = 0;
  {{/operation}}

  {{#operation}}
  void {{operationIdSnakeCase}}_validate_response(int status_code, const json& response);
  {{/operation}}

 protected:
  void api_return(int status_code, const nlohmann::json &response, CloudI::API const &api,
                  int const request_type, std::string const &name, std::string const &pattern,
                  uint32_t timeout, char const *const trans_id, char const *const pid,
                  uint32_t const pid_size);
  void _api_return(int status_code, const nlohmann::json &response, CloudI::API const &api,
                   int const request_type, std::string const &name, std::string const &pattern,
                   uint32_t timeout, char const *const trans_id, char const *const pid,
                   uint32_t const pid_size);
};

} // namespace {{apiNamespace}}

#endif /* {{classname}}_H_ */

{{/operations}}
